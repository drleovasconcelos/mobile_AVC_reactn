import React, { useState, useEffect, useCallback } from 'react';
import {
    View,
    Text,
    StyleSheet,
    SafeAreaView,
    ScrollView,
    TouchableOpacity,
    TextInput,
    Alert,
    KeyboardAvoidingView,
    Platform,
    Modal
} from 'react-native';
import Footer from '../components/Footer';
import { useAnamnese } from '../context/AnamneseContext';
import DateTimePicker from '@react-native-community/datetimepicker';

const Anamnese = ({ navigation, route }) => {
    const { paciente } = route.params;
    const { saveAnamneseData, getAnamneseData } = useAnamnese();
    
    // Estado para controlar quais se√ß√µes est√£o expandidas
    const [expandedSections, setExpandedSections] = useState({});
    
    // Estados para controlar os pickers de data
    const [showDataAvaliacaoPicker, setShowDataAvaliacaoPicker] = useState(false);
    const [showDataNascimentoPicker, setShowDataNascimentoPicker] = useState(false);
    
    // Fun√ß√£o auxiliar para converter string de data para Date object
    const parseDateString = useCallback((dateString) => {
        if (!dateString) return new Date();
        try {
            const parts = dateString.split('/');
            if (parts.length === 3) {
                const day = parseInt(parts[0]);
                const month = parseInt(parts[1]) - 1; // M√™s come√ßa em 0
                const year = parseInt(parts[2]);
                
                // Validar se os valores s√£o v√°lidos
                if (day >= 1 && day <= 31 && month >= 0 && month <= 11 && year >= 1900) {
                    return new Date(year, month, day);
                }
            }
        } catch (error) {
            console.log('Erro ao converter data:', error);
        }
        return new Date();
    }, []);

    // Fun√ß√£o para alternar o estado de expans√£o de uma se√ß√£o
    const toggleSection = useCallback((sectionKey) => {
        setExpandedSections(prev => ({
            ...prev,
            [sectionKey]: !prev[sectionKey]
        }));
    }, []);

    // Fun√ß√£o para lidar com a sele√ß√£o da data de avalia√ß√£o
    const handleDataAvaliacaoChange = useCallback((event, selectedDate) => {
        setShowDataAvaliacaoPicker(false);
        if (selectedDate && event.type !== 'dismissed') {
            const formattedDate = selectedDate.toLocaleDateString('pt-BR');
            setFormData(prev => ({
                ...prev,
                dataAvaliacao: formattedDate
            }));
        }
    }, []);

    // Fun√ß√£o para lidar com a sele√ß√£o da data de nascimento
    const handleDataNascimentoChange = useCallback((event, selectedDate) => {
        setShowDataNascimentoPicker(false);
        if (selectedDate && event.type !== 'dismissed') {
            const formattedDate = selectedDate.toLocaleDateString('pt-BR');
            
            // Calcular idade de forma mais precisa
            const today = new Date();
            const birthDate = new Date(selectedDate);
            
            let age = today.getFullYear() - birthDate.getFullYear();
            const monthDiff = today.getMonth() - birthDate.getMonth();
            
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }
            
            // Garantir que a idade n√£o seja negativa e n√£o seja muito alta
            age = Math.max(0, Math.min(age, 150));
            
            setFormData(prev => ({
                ...prev,
                dataNascimento: formattedDate,
                idade: age.toString()
            }));
        }
    }, []);

    // Estado para os dados do formul√°rio
    const [formData, setFormData] = useState({
        // Se√ß√£o 1: Identifica√ß√£o Pessoal
        dataAvaliacao: '',
        numeroProntuario: paciente.prontuario || '',
        nomeCompleto: paciente.nome || '',
        dataNascimento: '',
        idade: '',
        diagnosticoClinico: '',
        sexo: '',
        racaCor: '',
        
        // Se√ß√£o 2: Informa√ß√µes Socioecon√¥micas
        ocupacao: '',
        estadoCivil: '',
        escolaridade: '',
        lateralidade: '',
        tipoTransporte: '',
        outroTransporte: '',
        
        // Se√ß√£o 3: Impress√£o Geral
        impressaoGeral: [],
        locomocao: '',
        outrosImpressao: '',
        outrosLocomocao: '',
        
        // Se√ß√£o 4: Queixa Principal
        descricaoQueixa: '',
        inicioSintomas: '',
        intensidade: '',
        frequencia: '',
        fatoresMelhora: '',
        fatoresPiora: '',
        
        // Se√ß√£o 5: Hist√≥ria da Doen√ßa
        evolucaoSintomas: '',
        tratamentosAnteriores: '',
        examesRealizados: '',
        impactoRotina: '',
        
                 // Se√ß√£o 6: Hist√≥rico M√©dico
         doencasCronicas: '',
         cirurgiasAnteriores: '',
         quaisCirurgias: '',
         internacoesAnteriores: '',
         quaisInternacoes: '',
         alergiasAlimentares: '',
         quaisAlergias: '',
         detalhesMedicos: '',
        
        // Se√ß√£o 7: Hist√≥rico Familiar
        doencasHereditarias: '',
        quaisDoencasHereditarias: '',
        condicoesCronicas: '',
        quaisCondicoes: '',
        detalhesFamiliares: '',
        
        // Se√ß√£o 8: Hist√≥rico Psicossocial
        tabagismo: '',
        consumoAlcool: '',
        usoDrogas: '',
        atividadeFisica: '',
        habitosAlimentares: '',
        saudeMental: '',
        
                 // Se√ß√£o 9: Uso de Medicamentos
         medicamentosUso: '',
         quaisMedicamentos: '',
         alergiasMedicamentos: '',
         quaisAlergiasMedicamentos: '',
         observacoesMedicamentos: '',
        
        // Se√ß√£o 10: Impress√£o Diagn√≥stica
        hipotesesDiagnosticas: '',
        condutaInicial: '',
        encaminhamentos: '',
        observacoesClinicas: ''
    });

    // Carregar dados existentes ao montar o componente
    useEffect(() => {
        const existingData = getAnamneseData(paciente.prontuario);
        if (existingData && Object.keys(existingData).length > 0) {
            setFormData(prev => {
                // S√≥ atualiza se os dados s√£o diferentes
                const hasChanges = Object.keys(existingData).some(key => 
                    existingData[key] !== prev[key]
                );
                
                if (hasChanges) {
                    return {
                        ...prev,
                        ...existingData
                    };
                }
                return prev;
            });
        } else {
            // Se n√£o h√° dados existentes, inicializar com a data atual
            setFormData(prev => ({
                ...prev,
                dataAvaliacao: new Date().toLocaleDateString('pt-BR')
            }));
        }
    }, [paciente.prontuario, getAnamneseData]);

    // Salvar dados automaticamente quando formData mudar (com debounce)
    useEffect(() => {
        const timeoutId = setTimeout(() => {
            if (Object.keys(formData).some(key => formData[key] !== '')) {
                saveAnamneseData(paciente.prontuario, formData);
            }
        }, 1000); // Aguarda 1 segundo antes de salvar

        return () => clearTimeout(timeoutId);
    }, [formData, paciente.prontuario, saveAnamneseData]);

    // Dados das se√ß√µes
    const sections = [
        {
            key: 'identificacao',
            title: '1. Identifica√ß√£o Pessoal',
            icon: 'üë§',
            content: 'Dados pessoais, documentos, contatos...'
        },
        {
            key: 'socioeconomicas',
            title: '2. Informa√ß√µes Socioecon√¥micas',
            icon: 'üè†',
            content: 'Condi√ß√µes de moradia, trabalho, renda...'
        },
        {
            key: 'impressaoGeral',
            title: '3. Impress√£o Geral do Paciente (Contato Inicial)',
            icon: 'üëÅÔ∏è',
            content: 'Primeira impress√£o, apar√™ncia geral, estado de consci√™ncia...'
        },
        {
            key: 'queixaPrincipal',
            title: '4. Queixa Principal',
            icon: 'üí¨',
            content: 'Motivo da consulta, sintomas principais...'
        },
        {
            key: 'historiaDoenca',
            title: '5. Hist√≥ria da Doen√ßa Atual',
            icon: 'üìã',
            content: 'Evolu√ß√£o dos sintomas, dura√ß√£o, fatores agravantes...'
        },
        {
            key: 'historicoMedico',
            title: '6. Hist√≥rico M√©dico Pregresso',
            icon: 'üè•',
            content: 'Doen√ßas anteriores, cirurgias, interna√ß√µes...'
        },
        {
            key: 'historicoFamiliar',
            title: '7. Hist√≥rico Familiar',
            icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
            content: 'Hist√≥rico de doen√ßas na fam√≠lia, hereditariedade...'
        },
        {
            key: 'historicoPsicossocial',
            title: '8. Hist√≥rico Psicossocial',
            icon: 'üß†',
            content: 'Hist√≥rico psicol√≥gico, social, h√°bitos de vida...'
        },
        {
            key: 'usoMedicamentos',
            title: '9. Uso de Medicamentos',
            icon: 'üíä',
            content: 'Medicamentos em uso, alergias, rea√ß√µes adversas...'
        },
        {
            key: 'impressaoDiagnostica',
            title: '10. Impress√£o Diagn√≥stica',
            icon: 'üîç',
            content: 'Hip√≥teses diagn√≥sticas, impress√£o cl√≠nica...'
        }
    ];

    // Fun√ß√£o para renderizar o conte√∫do espec√≠fico de cada se√ß√£o
    const renderSectionContent = (sectionKey) => {
        switch(sectionKey) {
            case 'identificacao':
                return (
                    <View style={styles.formContent}>
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Data da avalia√ß√£o:</Text>
                            <TouchableOpacity 
                                style={styles.dateButton}
                                onPress={() => setShowDataAvaliacaoPicker(true)}
                            >
                                <Text style={styles.dateButtonText}>
                                    {formData.dataAvaliacao ? formData.dataAvaliacao : 'üìÖ Selecionar Data'}
                                </Text>
                            </TouchableOpacity>
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>N√∫mero do prontu√°rio:</Text>
                            <TextInput
                                style={styles.textInput}
                                value={formData.numeroProntuario}
                                onChangeText={(text) => setFormData({...formData, numeroProntuario: text})}
                                placeholder="Digite o n√∫mero do prontu√°rio"
                            />
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Nome completo:</Text>
                            <TextInput
                                style={styles.textInput}
                                value={formData.nomeCompleto}
                                onChangeText={(text) => setFormData({...formData, nomeCompleto: text})}
                                placeholder="Digite o nome completo"
                            />
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Data de nascimento:</Text>
                            <TouchableOpacity 
                                style={styles.dateButton}
                                onPress={() => setShowDataNascimentoPicker(true)}
                            >
                                <Text style={styles.dateButtonText}>
                                    {formData.dataNascimento ? formData.dataNascimento : 'üìÖ Selecionar Data'}
                                </Text>
                            </TouchableOpacity>
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Idade:</Text>
                            <TextInput
                                style={[styles.textInput, styles.ageInput]}
                                value={formData.idade ? `${formData.idade} anos` : ''}
                                placeholder="Idade calculada automaticamente"
                                editable={false}
                            />
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Diagn√≥stico cl√≠nico:</Text>
                            <TextInput
                                style={styles.textInput}
                                value={formData.diagnosticoClinico}
                                onChangeText={(text) => setFormData({...formData, diagnosticoClinico: text})}
                                placeholder="Digite o diagn√≥stico cl√≠nico"
                            />
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Sexo:</Text>
                            <View style={styles.checkboxGroup}>
                                {['Masculino', 'Feminino', 'Outro'].map((opcao) => (
                                    <TouchableOpacity
                                        key={opcao}
                                        style={styles.checkboxItem}
                                        onPress={() => setFormData({...formData, sexo: opcao})}
                                    >
                                        <Text style={formData.sexo === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                            {formData.sexo === opcao ? '‚òë' : '‚òê'} {opcao}
                                        </Text>
                                    </TouchableOpacity>
                                ))}
                            </View>
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Ra√ßa/Cor:</Text>
                            <View style={styles.checkboxGroup}>
                                {['Branca', 'Preta', 'Parda', 'Amarela', 'Ind√≠gena', 'Prefere n√£o informar'].map((opcao) => (
                                    <TouchableOpacity
                                        key={opcao}
                                        style={styles.checkboxItem}
                                        onPress={() => setFormData({...formData, racaCor: opcao})}
                                    >
                                        <Text style={formData.racaCor === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                            {formData.racaCor === opcao ? '‚òë' : '‚òê'} {opcao}
                                        </Text>
                                    </TouchableOpacity>
                                ))}
                            </View>
                        </View>
                    </View>
                );
                
            case 'socioeconomicas':
                return (
                    <View style={styles.formContent}>
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Ocupa√ß√£o/Profiss√£o:</Text>
                            <TextInput
                                style={styles.textInput}
                                value={formData.ocupacao}
                                onChangeText={(text) => setFormData({...formData, ocupacao: text})}
                                placeholder="Digite a ocupa√ß√£o/profiss√£o"
                            />
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Estado civil:</Text>
                            <View style={styles.checkboxGroup}>
                                {['Solteiro(a)', 'Casado(a)', 'Divorciado(a)', 'Vi√∫vo(a)', 'Uni√£o est√°vel'].map((opcao) => (
                                    <TouchableOpacity
                                        key={opcao}
                                        style={styles.checkboxItem}
                                        onPress={() => setFormData({...formData, estadoCivil: opcao})}
                                    >
                                        <Text style={formData.estadoCivil === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                            {formData.estadoCivil === opcao ? '‚òë' : '‚òê'} {opcao}
                                        </Text>
                                    </TouchableOpacity>
                                ))}
                            </View>
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Escolaridade:</Text>
                            <View style={styles.checkboxGroup}>
                                {[
                                    'Ensino fundamental incompleto',
                                    'Ensino fundamental completo',
                                    'Ensino m√©dio incompleto',
                                    'Ensino m√©dio completo',
                                    'Ensino superior incompleto',
                                    'Ensino superior completo',
                                    'P√≥s-gradua√ß√£o'
                                ].map((opcao) => (
                                    <TouchableOpacity
                                        key={opcao}
                                        style={styles.checkboxItem}
                                        onPress={() => setFormData({...formData, escolaridade: opcao})}
                                    >
                                        <Text style={formData.escolaridade === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                            {formData.escolaridade === opcao ? '‚òë' : '‚òê'} {opcao}
                                        </Text>
                                    </TouchableOpacity>
                                ))}
                            </View>
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Lateralidade:</Text>
                            <View style={styles.checkboxGroup}>
                                {['Destro', 'Canhoto', 'Ambidestro'].map((opcao) => (
                                    <TouchableOpacity
                                        key={opcao}
                                        style={styles.checkboxItem}
                                        onPress={() => setFormData({...formData, lateralidade: opcao})}
                                    >
                                        <Text style={formData.lateralidade === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                            {formData.lateralidade === opcao ? '‚òë' : '‚òê'} {opcao}
                                        </Text>
                                    </TouchableOpacity>
                                ))}
                            </View>
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Tipo de transporte utilizado:</Text>
                            <View style={styles.checkboxGroup}>
                                {['Pr√≥prio', 'Alugado', 'Emprestado', 'Transporte p√∫blico', 'Aplicativo (Uber, 99 etc.)', 'Outro'].map((opcao) => (
                                    <TouchableOpacity
                                        key={opcao}
                                        style={styles.checkboxItem}
                                        onPress={() => setFormData({...formData, tipoTransporte: opcao})}
                                    >
                                        <Text style={formData.tipoTransporte === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                            {formData.tipoTransporte === opcao ? '‚òë' : '‚òê'} {opcao}
                                        </Text>
                                    </TouchableOpacity>
                                ))}
                            </View>
                        </View>
                        
                        {formData.tipoTransporte === 'Outro' && (
                            <View style={styles.formRow}>
                                <Text style={styles.formLabel}>Especificar:</Text>
                                <TextInput
                                    style={styles.textInput}
                                    value={formData.outroTransporte}
                                    onChangeText={(text) => setFormData({...formData, outroTransporte: text})}
                                    placeholder="Digite o tipo de transporte"
                                />
                            </View>
                        )}
                    </View>
                );
                
            case 'impressaoGeral':
                return (
                    <View style={styles.formContent}>
                        <Text style={styles.formLabel}>Impress√£o Geral:</Text>
                        <View style={styles.checkboxGroup}>
                            {[
                                'Inconsciente', 'Confuso', 'Altera√ß√£o de linguagem', 'Fadigado',
                                'Cansado', 'Ansioso', 'Deprimido', 'Ap√°tico', 'Colaborante',
                                'Agressivo', 'Agitado', 'Sonolento', 'Orientado', 'Desorientado',
                                'Choroso', 'Irritado'
                            ].map((opcao) => (
                                <TouchableOpacity
                                    key={opcao}
                                    style={styles.checkboxItem}
                                    onPress={() => {
                                        const newImpressao = formData.impressaoGeral || [];
                                        const index = newImpressao.indexOf(opcao);
                                        if (index > -1) {
                                            newImpressao.splice(index, 1);
                                        } else {
                                            newImpressao.push(opcao);
                                        }
                                        setFormData({...formData, impressaoGeral: newImpressao});
                                    }}
                                >
                                    <Text style={(formData.impressaoGeral || []).includes(opcao) ? styles.checkboxTextSelected : styles.checkboxText}>
                                        {(formData.impressaoGeral || []).includes(opcao) ? '‚òë' : '‚òê'} {opcao}
                                    </Text>
                                </TouchableOpacity>
                            ))}
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Outros:</Text>
                            <TextInput
                                style={styles.textInput}
                                value={formData.outrosImpressao}
                                onChangeText={(text) => setFormData({...formData, outrosImpressao: text})}
                                placeholder="Especificar outros"
                            />
                        </View>
                        
                        <Text style={styles.formLabel}>Locomo√ß√£o (Chegada ao Servi√ßo):</Text>
                        <View style={styles.checkboxGroup}>
                            {[
                                'Deambula√ß√£o independente',
                                'Deambula com supervis√£o (sem contato f√≠sico)',
                                'Deambula com assist√™ncia leve (bra√ßo, apoio verbal)',
                                'Deambula com assist√™ncia moderada (muleta, bengala, acompanhante segurando)',
                                'Deambula com assist√™ncia total (cadeira de rodas empurrada, carregado)',
                                'Cadeirante independente',
                                'Cadeirante dependente',
                                'Em maca',
                                'Em ambul√¢ncia',
                                'Em ve√≠culo particular'
                            ].map((opcao) => (
                                <TouchableOpacity
                                    key={opcao}
                                    style={styles.checkboxItem}
                                    onPress={() => setFormData({...formData, locomocao: opcao})}
                                >
                                    <Text style={formData.locomocao === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                        {formData.locomocao === opcao ? '‚òë' : '‚òê'} {opcao}
                                    </Text>
                                </TouchableOpacity>
                            ))}
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Outros:</Text>
                            <TextInput
                                style={styles.textInput}
                                value={formData.outrosLocomocao}
                                onChangeText={(text) => setFormData({...formData, outrosLocomocao: text})}
                                placeholder="Especificar outros"
                            />
                        </View>
                    </View>
                );
                
            case 'queixaPrincipal':
                return (
                    <View style={styles.formContent}>
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Descri√ß√£o da queixa:</Text>
                            <TextInput
                                style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                value={formData.descricaoQueixa}
                                onChangeText={(text) => setFormData({...formData, descricaoQueixa: text})}
                                placeholder="Descreva a queixa principal"
                                multiline
                            />
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>In√≠cio dos sintomas:</Text>
                            <TextInput
                                style={styles.textInput}
                                value={formData.inicioSintomas}
                                onChangeText={(text) => setFormData({...formData, inicioSintomas: text})}
                                placeholder="Quando come√ßaram os sintomas"
                            />
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Intensidade:</Text>
                            <View style={styles.checkboxGroup}>
                                {['Leve', 'Moderada', 'Intensa'].map((opcao) => (
                                    <TouchableOpacity
                                        key={opcao}
                                        style={styles.checkboxItem}
                                        onPress={() => setFormData({...formData, intensidade: opcao})}
                                    >
                                        <Text style={formData.intensidade === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                            {formData.intensidade === opcao ? '‚òë' : '‚òê'} {opcao}
                                        </Text>
                                    </TouchableOpacity>
                                ))}
                            </View>
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Frequ√™ncia:</Text>
                            <View style={styles.checkboxGroup}>
                                {['Ocasional', 'Frequente', 'Cont√≠nua'].map((opcao) => (
                                    <TouchableOpacity
                                        key={opcao}
                                        style={styles.checkboxItem}
                                        onPress={() => setFormData({...formData, frequencia: opcao})}
                                    >
                                        <Text style={formData.frequencia === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                            {formData.frequencia === opcao ? '‚òë' : '‚òê'} {opcao}
                                        </Text>
                                    </TouchableOpacity>
                                ))}
                            </View>
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Fatores de melhora:</Text>
                            <TextInput
                                style={styles.textInput}
                                value={formData.fatoresMelhora}
                                onChangeText={(text) => setFormData({...formData, fatoresMelhora: text})}
                                placeholder="O que melhora os sintomas"
                            />
                        </View>
                        
                        <View style={styles.formRow}>
                            <Text style={styles.formLabel}>Fatores de piora:</Text>
                            <TextInput
                                style={styles.textInput}
                                value={formData.fatoresPiora}
                                onChangeText={(text) => setFormData({...formData, fatoresPiora: text})}
                                placeholder="O que piora os sintomas"
                            />
                        </View>
                    </View>
                );
                
                         case 'historiaDoenca':
                 return (
                     <View style={styles.formContent}>
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Evolu√ß√£o dos sintomas:</Text>
                             <TextInput
                                 style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                 value={formData.evolucaoSintomas}
                                 onChangeText={(text) => setFormData({...formData, evolucaoSintomas: text})}
                                 placeholder="Como os sintomas evolu√≠ram"
                                 multiline
                             />
                         </View>
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Tratamentos anteriores:</Text>
                             <TextInput
                                 style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                 value={formData.tratamentosAnteriores}
                                 onChangeText={(text) => setFormData({...formData, tratamentosAnteriores: text})}
                                 placeholder="Tratamentos j√° realizados"
                                 multiline
                             />
                         </View>
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Exames realizados:</Text>
                             <TextInput
                                 style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                 value={formData.examesRealizados}
                                 onChangeText={(text) => setFormData({...formData, examesRealizados: text})}
                                 placeholder="Exames j√° realizados"
                                 multiline
                             />
                         </View>
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Impacto na rotina:</Text>
                             <TextInput
                                 style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                 value={formData.impactoRotina}
                                 onChangeText={(text) => setFormData({...formData, impactoRotina: text})}
                                 placeholder="Como afeta a rotina di√°ria"
                                 multiline
                             />
                         </View>
                     </View>
                 );

             case 'historicoMedico':
                 return (
                     <View style={styles.formContent}>
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Doen√ßas cr√¥nicas:</Text>
                             <TextInput
                                 style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                 value={formData.doencasCronicas}
                                 onChangeText={(text) => setFormData({...formData, doencasCronicas: text})}
                                 placeholder="Descreva as doen√ßas cr√¥nicas"
                                 multiline
                             />
                         </View>
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Cirurgias anteriores:</Text>
                             <View style={styles.checkboxGroup}>
                                 {['Sim', 'N√£o'].map((opcao) => (
                                     <TouchableOpacity
                                         key={opcao}
                                         style={styles.checkboxItem}
                                         onPress={() => setFormData({...formData, cirurgiasAnteriores: opcao})}
                                     >
                                         <Text style={formData.cirurgiasAnteriores === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                             {formData.cirurgiasAnteriores === opcao ? '‚òë' : '‚òê'} {opcao}
                                         </Text>
                                     </TouchableOpacity>
                                 ))}
                             </View>
                         </View>
                         
                         {formData.cirurgiasAnteriores === 'Sim' && (
                             <View style={styles.formRow}>
                                 <Text style={styles.formLabel}>Quais cirurgias:</Text>
                                 <TextInput
                                     style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                     value={formData.quaisCirurgias}
                                     onChangeText={(text) => setFormData({...formData, quaisCirurgias: text})}
                                     placeholder="Especifique as cirurgias realizadas"
                                     multiline
                                 />
                             </View>
                         )}
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Interna√ß√µes anteriores:</Text>
                             <View style={styles.checkboxGroup}>
                                 {['Sim', 'N√£o'].map((opcao) => (
                                     <TouchableOpacity
                                         key={opcao}
                                         style={styles.checkboxItem}
                                         onPress={() => setFormData({...formData, internacoesAnteriores: opcao})}
                                     >
                                         <Text style={formData.internacoesAnteriores === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                             {formData.internacoesAnteriores === opcao ? '‚òë' : '‚òê'} {opcao}
                                         </Text>
                                     </TouchableOpacity>
                                 ))}
                             </View>
                         </View>
                         
                         {formData.internacoesAnteriores === 'Sim' && (
                             <View style={styles.formRow}>
                                 <Text style={styles.formLabel}>Quais interna√ß√µes:</Text>
                                 <TextInput
                                     style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                     value={formData.quaisInternacoes}
                                     onChangeText={(text) => setFormData({...formData, quaisInternacoes: text})}
                                     placeholder="Especifique as interna√ß√µes"
                                     multiline
                                 />
                             </View>
                         )}
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Alergias alimentares:</Text>
                             <View style={styles.checkboxGroup}>
                                 {['Sim', 'N√£o'].map((opcao) => (
                                     <TouchableOpacity
                                         key={opcao}
                                         style={styles.checkboxItem}
                                         onPress={() => setFormData({...formData, alergiasAlimentares: opcao})}
                                     >
                                         <Text style={formData.alergiasAlimentares === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                             {formData.alergiasAlimentares === opcao ? '‚òë' : '‚òê'} {opcao}
                                         </Text>
                                     </TouchableOpacity>
                                 ))}
                             </View>
                         </View>
                         
                         {formData.alergiasAlimentares === 'Sim' && (
                             <View style={styles.formRow}>
                                 <Text style={styles.formLabel}>Quais alergias:</Text>
                                 <TextInput
                                     style={styles.textInput}
                                     value={formData.quaisAlergias}
                                     onChangeText={(text) => setFormData({...formData, quaisAlergias: text})}
                                     placeholder="Especifique as alergias alimentares"
                                 />
                             </View>
                         )}
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Detalhamento m√©dico:</Text>
                             <TextInput
                                 style={[styles.textInput, { height: 100, textAlignVertical: 'top' }]}
                                 value={formData.detalhesMedicos}
                                 onChangeText={(text) => setFormData({...formData, detalhesMedicos: text})}
                                 placeholder="Campo de texto livre para detalhamento m√©dico"
                                 multiline
                             />
                         </View>
                     </View>
                 );

             case 'historicoFamiliar':
                 return (
                     <View style={styles.formContent}>
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Doen√ßas heredit√°rias:</Text>
                             <View style={styles.checkboxGroup}>
                                 {['Sim', 'N√£o'].map((opcao) => (
                                     <TouchableOpacity
                                         key={opcao}
                                         style={styles.checkboxItem}
                                         onPress={() => setFormData({...formData, doencasHereditarias: opcao})}
                                     >
                                         <Text style={formData.doencasHereditarias === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                             {formData.doencasHereditarias === opcao ? '‚òë' : '‚òê'} {opcao}
                                         </Text>
                                     </TouchableOpacity>
                                 ))}
                             </View>
                         </View>
                         
                         {formData.doencasHereditarias === 'Sim' && (
                             <View style={styles.formRow}>
                                 <Text style={styles.formLabel}>Quais doen√ßas heredit√°rias:</Text>
                                 <TextInput
                                     style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                     value={formData.quaisDoencasHereditarias}
                                     onChangeText={(text) => setFormData({...formData, quaisDoencasHereditarias: text})}
                                     placeholder="Especifique as doen√ßas heredit√°rias"
                                     multiline
                                 />
                             </View>
                         )}
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Condi√ß√µes cr√¥nicas na fam√≠lia:</Text>
                             <View style={styles.checkboxGroup}>
                                 {['Sim', 'N√£o'].map((opcao) => (
                                     <TouchableOpacity
                                         key={opcao}
                                         style={styles.checkboxItem}
                                         onPress={() => setFormData({...formData, condicoesCronicas: opcao})}
                                     >
                                         <Text style={formData.condicoesCronicas === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                             {formData.condicoesCronicas === opcao ? '‚òë' : '‚òê'} {opcao}
                                         </Text>
                                     </TouchableOpacity>
                                 ))}
                             </View>
                         </View>
                         
                         {formData.condicoesCronicas === 'Sim' && (
                             <View style={styles.formRow}>
                                 <Text style={styles.formLabel}>Quais condi√ß√µes:</Text>
                                 <TextInput
                                     style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                     value={formData.quaisCondicoes}
                                     onChangeText={(text) => setFormData({...formData, quaisCondicoes: text})}
                                     placeholder="Especifique as condi√ß√µes cr√¥nicas na fam√≠lia"
                                     multiline
                                 />
                             </View>
                         )}
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Detalhamento familiar:</Text>
                             <TextInput
                                 style={[styles.textInput, { height: 100, textAlignVertical: 'top' }]}
                                 value={formData.detalhesFamiliares}
                                 onChangeText={(text) => setFormData({...formData, detalhesFamiliares: text})}
                                 placeholder="Campo de texto livre para detalhamento familiar"
                                 multiline
                             />
                         </View>
                     </View>
                 );

             case 'historicoPsicossocial':
                 return (
                     <View style={styles.formContent}>
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Tabagismo:</Text>
                             <View style={styles.checkboxGroup}>
                                 {['Nunca fumou', 'Ex-fumante', 'Fumante atual'].map((opcao) => (
                                     <TouchableOpacity
                                         key={opcao}
                                         style={styles.checkboxItem}
                                         onPress={() => setFormData({...formData, tabagismo: opcao})}
                                     >
                                         <Text style={formData.tabagismo === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                             {formData.tabagismo === opcao ? '‚òë' : '‚òê'} {opcao}
                                         </Text>
                                     </TouchableOpacity>
                                 ))}
                             </View>
                         </View>
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Consumo de √°lcool:</Text>
                             <View style={styles.checkboxGroup}>
                                 {['N√£o consome', 'Socialmente', 'Regularmente'].map((opcao) => (
                                     <TouchableOpacity
                                         key={opcao}
                                         style={styles.checkboxItem}
                                         onPress={() => setFormData({...formData, consumoAlcool: opcao})}
                                     >
                                         <Text style={formData.consumoAlcool === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                             {formData.consumoAlcool === opcao ? '‚òë' : '‚òê'} {opcao}
                                         </Text>
                                     </TouchableOpacity>
                                 ))}
                             </View>
                         </View>
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Uso de drogas:</Text>
                             <View style={styles.checkboxGroup}>
                                 {['N√£o usa', 'Uso ocasional', 'Uso frequente'].map((opcao) => (
                                     <TouchableOpacity
                                         key={opcao}
                                         style={styles.checkboxItem}
                                         onPress={() => setFormData({...formData, usoDrogas: opcao})}
                                     >
                                         <Text style={formData.usoDrogas === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                             {formData.usoDrogas === opcao ? '‚òë' : '‚òê'} {opcao}
                                         </Text>
                                     </TouchableOpacity>
                                 ))}
                             </View>
                         </View>
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Atividade f√≠sica:</Text>
                             <View style={styles.checkboxGroup}>
                                 {['Sedent√°rio', 'Irregular', 'Regular'].map((opcao) => (
                                     <TouchableOpacity
                                         key={opcao}
                                         style={styles.checkboxItem}
                                         onPress={() => setFormData({...formData, atividadeFisica: opcao})}
                                     >
                                         <Text style={formData.atividadeFisica === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                             {formData.atividadeFisica === opcao ? '‚òë' : '‚òê'} {opcao}
                                         </Text>
                                     </TouchableOpacity>
                                 ))}
                             </View>
                         </View>
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>H√°bitos alimentares:</Text>
                             <View style={styles.checkboxGroup}>
                                 {['Saud√°veis', 'Irregulares', 'Restritivos'].map((opcao) => (
                                     <TouchableOpacity
                                         key={opcao}
                                         style={styles.checkboxItem}
                                         onPress={() => setFormData({...formData, habitosAlimentares: opcao})}
                                     >
                                         <Text style={formData.habitosAlimentares === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                             {formData.habitosAlimentares === opcao ? '‚òë' : '‚òê'} {opcao}
                                         </Text>
                                     </TouchableOpacity>
                                 ))}
                             </View>
                         </View>
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Sa√∫de mental:</Text>
                             <View style={styles.checkboxGroup}>
                                 {['Sem queixas', 'Ansiedade', 'Depress√£o', 'Transtornos diagnosticados', 'Em acompanhamento psicol√≥gico/psiqui√°trico'].map((opcao) => (
                                     <TouchableOpacity
                                         key={opcao}
                                         style={styles.checkboxItem}
                                         onPress={() => setFormData({...formData, saudeMental: opcao})}
                                     >
                                         <Text style={formData.saudeMental === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                             {formData.saudeMental === opcao ? '‚òë' : '‚òê'} {opcao}
                                         </Text>
                                     </TouchableOpacity>
                                 ))}
                             </View>
                         </View>
                     </View>
                 );

             case 'usoMedicamentos':
                 return (
                     <View style={styles.formContent}>
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Medicamentos em uso atual:</Text>
                             <View style={styles.checkboxGroup}>
                                 {['Sim', 'N√£o'].map((opcao) => (
                                     <TouchableOpacity
                                         key={opcao}
                                         style={styles.checkboxItem}
                                         onPress={() => setFormData({...formData, medicamentosUso: opcao})}
                                     >
                                         <Text style={formData.medicamentosUso === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                             {formData.medicamentosUso === opcao ? '‚òë' : '‚òê'} {opcao}
                                         </Text>
                                     </TouchableOpacity>
                                 ))}
                             </View>
                         </View>
                         
                         {formData.medicamentosUso === 'Sim' && (
                             <View style={styles.formRow}>
                                 <Text style={styles.formLabel}>Quais medicamentos:</Text>
                                 <TextInput
                                     style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                     value={formData.quaisMedicamentos}
                                     onChangeText={(text) => setFormData({...formData, quaisMedicamentos: text})}
                                     placeholder="Especifique os medicamentos em uso"
                                     multiline
                                 />
                             </View>
                         )}
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Alergias a medicamentos:</Text>
                             <View style={styles.checkboxGroup}>
                                 {['Sim', 'N√£o'].map((opcao) => (
                                     <TouchableOpacity
                                         key={opcao}
                                         style={styles.checkboxItem}
                                         onPress={() => setFormData({...formData, alergiasMedicamentos: opcao})}
                                     >
                                         <Text style={formData.alergiasMedicamentos === opcao ? styles.checkboxTextSelected : styles.checkboxText}>
                                             {formData.alergiasMedicamentos === opcao ? '‚òë' : '‚òê'} {opcao}
                                         </Text>
                                     </TouchableOpacity>
                                 ))}
                             </View>
                         </View>
                         
                                                   {formData.alergiasMedicamentos === 'Sim' && (
                              <View style={styles.formRow}>
                                  <Text style={styles.formLabel}>Quais alergias a medicamentos:</Text>
                                  <TextInput
                                      style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                      value={formData.quaisAlergiasMedicamentos}
                                      onChangeText={(text) => setFormData({...formData, quaisAlergiasMedicamentos: text})}
                                      placeholder="Especifique as alergias a medicamentos"
                                      multiline
                                  />
                              </View>
                          )}
                          
                          <View style={styles.formRow}>
                              <Text style={styles.formLabel}>Observa√ß√µes cl√≠nicas:</Text>
                              <TextInput
                                  style={[styles.textInput, { height: 100, textAlignVertical: 'top' }]}
                                  value={formData.observacoesMedicamentos}
                                  onChangeText={(text) => setFormData({...formData, observacoesMedicamentos: text})}
                                  placeholder="Campo de texto livre para observa√ß√µes cl√≠nicas sobre medicamentos"
                                  multiline
                              />
                          </View>
                      </View>
                  );

             case 'impressaoDiagnostica':
                 return (
                     <View style={styles.formContent}>
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Hip√≥teses diagn√≥sticas:</Text>
                             <TextInput
                                 style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                 value={formData.hipotesesDiagnosticas}
                                 onChangeText={(text) => setFormData({...formData, hipotesesDiagnosticas: text})}
                                 placeholder="Descreva as hip√≥teses diagn√≥sticas"
                                 multiline
                             />
                         </View>
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Conduta inicial:</Text>
                             <TextInput
                                 style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                 value={formData.condutaInicial}
                                 onChangeText={(text) => setFormData({...formData, condutaInicial: text})}
                                 placeholder="Descreva a conduta inicial"
                                 multiline
                             />
                         </View>
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Encaminhamentos necess√°rios:</Text>
                             <TextInput
                                 style={[styles.textInput, { height: 80, textAlignVertical: 'top' }]}
                                 value={formData.encaminhamentos}
                                 onChangeText={(text) => setFormData({...formData, encaminhamentos: text})}
                                 placeholder="Descreva os encaminhamentos necess√°rios"
                                 multiline
                             />
                         </View>
                         
                         <View style={styles.formRow}>
                             <Text style={styles.formLabel}>Observa√ß√µes cl√≠nicas:</Text>
                             <TextInput
                                 style={[styles.textInput, { height: 100, textAlignVertical: 'top' }]}
                                 value={formData.observacoesClinicas}
                                 onChangeText={(text) => setFormData({...formData, observacoesClinicas: text})}
                                 placeholder="Campo de texto livre para observa√ß√µes cl√≠nicas"
                                 multiline
                             />
                         </View>
                     </View>
                 );
                 
             default:
                return (
                    <View style={styles.placeholderContent}>
                        <Text style={styles.placeholderText}>
                            Conte√∫do espec√≠fico desta se√ß√£o ser√° implementado aqui
                        </Text>
                    </View>
                );
        }
    };

    return (
        <SafeAreaView style={styles.container}>
            <View style={styles.header}>
                {/* Informa√ß√µes do Paciente */}
                <View style={styles.pacienteInfo}>
                    <Text style={styles.pacienteNome}>{paciente.nome}</Text>
                    <Text style={styles.pacienteProntuario}>Prontu√°rio: {paciente.prontuario}</Text>
                </View>
            </View>

            <KeyboardAvoidingView 
                style={styles.keyboardAvoidingView}
                behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
                keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0}
            >
                <ScrollView 
                    style={styles.content} 
                    showsVerticalScrollIndicator={false}
                    contentContainerStyle={styles.scrollContent}
                    keyboardShouldPersistTaps="handled"
                    automaticallyAdjustKeyboardInsets={true}
                >
                    <Text style={styles.title}>Anamnese</Text>
                    <Text style={styles.subtitle}>Selecione uma se√ß√£o para expandir</Text>
                    
                    {/* Se√ß√µes Colaps√°veis */}
                    <View style={styles.sectionsContainer}>
                        {sections.map((section) => (
                            <View key={section.key} style={styles.sectionWrapper}>
                                <TouchableOpacity 
                                    style={styles.sectionHeader}
                                    onPress={() => toggleSection(section.key)}
                                    activeOpacity={0.7}
                                >
                                    <View style={styles.sectionHeaderLeft}>
                                        <Text style={styles.sectionIcon}>{section.icon}</Text>
                                        <Text style={styles.sectionTitle}>{section.title}</Text>
                                    </View>
                                    <Text style={[
                                        styles.expandIcon,
                                        expandedSections[section.key] && styles.expandIconRotated
                                    ]}>
                                        ‚ñº
                                    </Text>
                                </TouchableOpacity>
                                
                                {expandedSections[section.key] && (
                                    <View style={styles.sectionContent}>
                                        {renderSectionContent(section.key)}
                                    </View>
                                )}
                            </View>
                        ))}
                    </View>
                </ScrollView>
            </KeyboardAvoidingView>

            {/* DateTimePickers */}
            {showDataAvaliacaoPicker && (
                <DateTimePicker
                    value={parseDateString(formData.dataAvaliacao)}
                    mode="date"
                    display={Platform.OS === 'ios' ? 'spinner' : 'default'}
                    onChange={handleDataAvaliacaoChange}
                    maximumDate={new Date()}
                    minimumDate={new Date(1900, 0, 1)}
                />
            )}
            
            {showDataNascimentoPicker && (
                <DateTimePicker
                    value={parseDateString(formData.dataNascimento)}
                    mode="date"
                    display={Platform.OS === 'ios' ? 'spinner' : 'default'}
                    onChange={handleDataNascimentoChange}
                    maximumDate={new Date()} // Permite apenas datas at√© hoje
                    minimumDate={new Date(1900, 0, 1)} // Permite datas a partir de 1900
                />
)}
            
            <Footer navigation={navigation} currentScreen="Anamnese" />
        </SafeAreaView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#f8f9fa',
    },
    header: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingHorizontal: 20,
        paddingTop: 20,
        paddingBottom: 20,
        backgroundColor: '#007bff',
    },
    pacienteInfo: {
        flex: 1,
        alignItems: 'center',
    },
    pacienteNome: {
        fontSize: 22,
        fontWeight: 'bold',
        color: '#fff',
        marginBottom: 4,
        textAlign: 'center',
    },
    pacienteProntuario: {
        fontSize: 16,
        color: '#fff',
        opacity: 0.9,
        textAlign: 'center',
    },
    keyboardAvoidingView: {
        flex: 1,
        width: '100%',
    },
    content: {
        flex: 1,
        paddingHorizontal: 20,
    },
    scrollContent: {
        paddingVertical: 20,
        paddingBottom: 100,
    },
    title: {
        fontSize: 28,
        fontWeight: 'bold',
        color: '#343a40',
        textAlign: 'center',
        marginBottom: 10,
    },
    subtitle: {
        fontSize: 16,
        color: '#6c757d',
        textAlign: 'center',
        marginBottom: 30,
    },
    sectionsContainer: {
        gap: 15,
    },
    sectionWrapper: {
        backgroundColor: '#fff',
        borderRadius: 12,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        elevation: 3,
        overflow: 'hidden',
    },
    sectionHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: 20,
        backgroundColor: '#f8f9fa',
        borderBottomWidth: 1,
        borderBottomColor: '#e9ecef',
    },
    sectionHeaderLeft: {
        flexDirection: 'row',
        alignItems: 'center',
        flex: 1,
    },
    sectionIcon: {
        fontSize: 24,
        marginRight: 15,
    },
    sectionTitle: {
        fontSize: 16,
        fontWeight: '600',
        color: '#343a40',
        flex: 1,
    },
    expandIcon: {
        fontSize: 16,
        color: '#6c757d',
        fontWeight: 'bold',
        transform: [{ rotate: '0deg' }],
    },
    expandIconRotated: {
        transform: [{ rotate: '180deg' }],
    },
    sectionContent: {
        padding: 20,
        backgroundColor: '#fff',
    },
    sectionContentText: {
        fontSize: 14,
        color: '#495057',
        marginBottom: 15,
        lineHeight: 20,
    },
    placeholderContent: {
        backgroundColor: '#f8f9fa',
        borderRadius: 8,
        padding: 15,
        borderLeftWidth: 4,
        borderLeftColor: '#007bff',
    },
    placeholderText: {
        fontSize: 13,
        color: '#6c757d',
        fontStyle: 'italic',
        textAlign: 'center',
    },
    formContent: {
        gap: 15,
    },
    formRow: {
        marginBottom: 15,
    },
    formLabel: {
        fontSize: 14,
        fontWeight: '600',
        color: '#343a40',
        marginBottom: 8,
    },
    textInput: {
        borderWidth: 1,
        borderColor: '#ced4da',
        borderRadius: 8,
        padding: 12,
        fontSize: 14,
        backgroundColor: '#fff',
        color: '#495057',
    },
    dateButton: {
        backgroundColor: '#007bff',
        padding: 12,
        borderRadius: 8,
        alignItems: 'center',
    },
    dateButtonText: {
        color: '#fff',
        fontSize: 14,
        fontWeight: '600',
    },
    ageInput: {
        backgroundColor: '#f8f9fa',
        color: '#6c757d',
        fontStyle: 'italic',
    },
    checkboxGroup: {
        gap: 8,
    },
    checkboxItem: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingVertical: 4,
    },
    checkboxText: {
        fontSize: 14,
        color: '#495057',
        marginLeft: 8,
    },
    checkboxTextSelected: {
        fontSize: 14,
        color: '#007bff',
        fontWeight: '600',
        marginLeft: 8,
    },
});

export default Anamnese;
